# This file was auto-generated by Fern from our API Definition.

from ....core.pydantic_utilities import UniversalBaseModel
import typing
import pydantic
from ....core.pydantic_utilities import IS_PYDANTIC_V2


class UsageByModel(UniversalBaseModel):
    """Daily usage of a given model. Usage corresponds to the unit set for the specific model (e.g. tokens).
    """

    model: typing.Optional[str] = None
    input_usage: int = pydantic.Field(alias="inputUsage")
    """
    Total number of generation input units (e.g. tokens)
    """

    output_usage: int = pydantic.Field(alias="outputUsage")
    """
    Total number of generation output units (e.g. tokens)
    """

    total_usage: int = pydantic.Field(alias="totalUsage")
    """
    Total number of generation total units (e.g. tokens)
    """

    count_traces: int = pydantic.Field(alias="countTraces")
    count_observations: int = pydantic.Field(alias="countObservations")
    total_cost: float = pydantic.Field(alias="totalCost")
    """
    Total model cost in USD
    """

    if IS_PYDANTIC_V2:
        model_config: typing.ClassVar[pydantic.ConfigDict] = pydantic.ConfigDict(
            extra="allow", frozen=True
        )  # type: ignore # Pydantic v2
    else:

        class Config:
            frozen = True
            smart_union = True
            extra = pydantic.Extra.allow
