# This file was auto-generated by Fern from our API Definition.

from ....core.pydantic_utilities import UniversalBaseModel
import pydantic
import datetime as dt
import typing
from ....core.pydantic_utilities import IS_PYDANTIC_V2


class Trace(UniversalBaseModel):
    id: str = pydantic.Field()
    """
    The unique identifier of a trace
    """

    timestamp: dt.datetime = pydantic.Field()
    """
    The timestamp when the trace was created
    """

    name: typing.Optional[str] = pydantic.Field(default=None)
    """
    The name of the trace
    """

    input: typing.Optional[typing.Optional[typing.Any]] = pydantic.Field(default=None)
    """
    The input data of the trace. Can be any JSON.
    """

    output: typing.Optional[typing.Optional[typing.Any]] = pydantic.Field(default=None)
    """
    The output data of the trace. Can be any JSON.
    """

    session_id: typing.Optional[str] = pydantic.Field(alias="sessionId", default=None)
    """
    The session identifier associated with the trace
    """

    release: typing.Optional[str] = pydantic.Field(default=None)
    """
    The release version of the application when the trace was created
    """

    version: typing.Optional[str] = pydantic.Field(default=None)
    """
    The version of the trace
    """

    user_id: typing.Optional[str] = pydantic.Field(alias="userId", default=None)
    """
    The user identifier associated with the trace
    """

    metadata: typing.Optional[typing.Optional[typing.Any]] = pydantic.Field(
        default=None
    )
    """
    The metadata associated with the trace. Can be any JSON.
    """

    tags: typing.Optional[typing.List[str]] = pydantic.Field(default=None)
    """
    The tags associated with the trace. Can be an array of strings or null.
    """

    public: typing.Optional[bool] = pydantic.Field(default=None)
    """
    Public traces are accessible via url without login
    """

    if IS_PYDANTIC_V2:
        model_config: typing.ClassVar[pydantic.ConfigDict] = pydantic.ConfigDict(
            extra="allow", frozen=True
        )  # type: ignore # Pydantic v2
    else:

        class Config:
            frozen = True
            smart_union = True
            extra = pydantic.Extra.allow
