# This file was auto-generated by Fern from our API Definition.

from ....core.pydantic_utilities import UniversalBaseModel
import pydantic
from .score_source import ScoreSource
import typing
import datetime as dt
from ....core.pydantic_utilities import IS_PYDANTIC_V2


class BaseScore(UniversalBaseModel):
    id: str
    trace_id: str = pydantic.Field(alias="traceId")
    name: str
    source: ScoreSource
    observation_id: typing.Optional[str] = pydantic.Field(
        alias="observationId", default=None
    )
    timestamp: dt.datetime
    created_at: dt.datetime = pydantic.Field(alias="createdAt")
    updated_at: dt.datetime = pydantic.Field(alias="updatedAt")
    author_user_id: typing.Optional[str] = pydantic.Field(
        alias="authorUserId", default=None
    )
    comment: typing.Optional[str] = None
    config_id: typing.Optional[str] = pydantic.Field(alias="configId", default=None)
    """
    Reference a score config on a score. When set, config and score name must be equal and value must comply to optionally defined numerical range
    """

    if IS_PYDANTIC_V2:
        model_config: typing.ClassVar[pydantic.ConfigDict] = pydantic.ConfigDict(
            extra="allow", frozen=True
        )  # type: ignore # Pydantic v2
    else:

        class Config:
            frozen = True
            smart_union = True
            extra = pydantic.Extra.allow
