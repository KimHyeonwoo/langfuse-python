# This file was auto-generated by Fern from our API Definition.

from ....core.pydantic_utilities import UniversalBaseModel
from .dataset_status import DatasetStatus
import typing
import pydantic
import datetime as dt
from ....core.pydantic_utilities import IS_PYDANTIC_V2


class DatasetItem(UniversalBaseModel):
    id: str
    status: DatasetStatus
    input: typing.Optional[typing.Optional[typing.Any]] = None
    expected_output: typing.Optional[typing.Optional[typing.Any]] = pydantic.Field(
        alias="expectedOutput", default=None
    )
    metadata: typing.Optional[typing.Optional[typing.Any]] = None
    source_trace_id: typing.Optional[str] = pydantic.Field(
        alias="sourceTraceId", default=None
    )
    source_observation_id: typing.Optional[str] = pydantic.Field(
        alias="sourceObservationId", default=None
    )
    dataset_id: str = pydantic.Field(alias="datasetId")
    dataset_name: str = pydantic.Field(alias="datasetName")
    created_at: dt.datetime = pydantic.Field(alias="createdAt")
    updated_at: dt.datetime = pydantic.Field(alias="updatedAt")

    if IS_PYDANTIC_V2:
        model_config: typing.ClassVar[pydantic.ConfigDict] = pydantic.ConfigDict(
            extra="allow", frozen=True
        )  # type: ignore # Pydantic v2
    else:

        class Config:
            frozen = True
            smart_union = True
            extra = pydantic.Extra.allow
