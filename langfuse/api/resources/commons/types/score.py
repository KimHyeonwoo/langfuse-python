# This file was auto-generated by Fern from our API Definition.

from __future__ import annotations
from ....core.pydantic_utilities import UniversalBaseModel
import typing
import pydantic
from .score_source import ScoreSource
import datetime as dt
from ....core.pydantic_utilities import IS_PYDANTIC_V2


class Score_Numeric(UniversalBaseModel):
    data_type: typing.Literal["NUMERIC"] = pydantic.Field(
        alias="dataType", default="NUMERIC"
    )
    value: float
    id: str
    trace_id: str = pydantic.Field(alias="traceId")
    name: str
    source: ScoreSource
    observation_id: typing.Optional[str] = pydantic.Field(
        alias="observationId", default=None
    )
    timestamp: dt.datetime
    created_at: dt.datetime = pydantic.Field(alias="createdAt")
    updated_at: dt.datetime = pydantic.Field(alias="updatedAt")
    author_user_id: typing.Optional[str] = pydantic.Field(
        alias="authorUserId", default=None
    )
    comment: typing.Optional[str] = None
    config_id: typing.Optional[str] = pydantic.Field(alias="configId", default=None)

    if IS_PYDANTIC_V2:
        model_config: typing.ClassVar[pydantic.ConfigDict] = pydantic.ConfigDict(
            extra="allow", frozen=True
        )  # type: ignore # Pydantic v2
    else:

        class Config:
            frozen = True
            smart_union = True
            extra = pydantic.Extra.allow


class Score_Categorical(UniversalBaseModel):
    data_type: typing.Literal["CATEGORICAL"] = pydantic.Field(
        alias="dataType", default="CATEGORICAL"
    )
    value: typing.Optional[float] = None
    string_value: str = pydantic.Field(alias="stringValue")
    id: str
    trace_id: str = pydantic.Field(alias="traceId")
    name: str
    source: ScoreSource
    observation_id: typing.Optional[str] = pydantic.Field(
        alias="observationId", default=None
    )
    timestamp: dt.datetime
    created_at: dt.datetime = pydantic.Field(alias="createdAt")
    updated_at: dt.datetime = pydantic.Field(alias="updatedAt")
    author_user_id: typing.Optional[str] = pydantic.Field(
        alias="authorUserId", default=None
    )
    comment: typing.Optional[str] = None
    config_id: typing.Optional[str] = pydantic.Field(alias="configId", default=None)

    if IS_PYDANTIC_V2:
        model_config: typing.ClassVar[pydantic.ConfigDict] = pydantic.ConfigDict(
            extra="allow", frozen=True
        )  # type: ignore # Pydantic v2
    else:

        class Config:
            frozen = True
            smart_union = True
            extra = pydantic.Extra.allow


class Score_Boolean(UniversalBaseModel):
    data_type: typing.Literal["BOOLEAN"] = pydantic.Field(
        alias="dataType", default="BOOLEAN"
    )
    value: float
    string_value: str = pydantic.Field(alias="stringValue")
    id: str
    trace_id: str = pydantic.Field(alias="traceId")
    name: str
    source: ScoreSource
    observation_id: typing.Optional[str] = pydantic.Field(
        alias="observationId", default=None
    )
    timestamp: dt.datetime
    created_at: dt.datetime = pydantic.Field(alias="createdAt")
    updated_at: dt.datetime = pydantic.Field(alias="updatedAt")
    author_user_id: typing.Optional[str] = pydantic.Field(
        alias="authorUserId", default=None
    )
    comment: typing.Optional[str] = None
    config_id: typing.Optional[str] = pydantic.Field(alias="configId", default=None)

    if IS_PYDANTIC_V2:
        model_config: typing.ClassVar[pydantic.ConfigDict] = pydantic.ConfigDict(
            extra="allow", frozen=True
        )  # type: ignore # Pydantic v2
    else:

        class Config:
            frozen = True
            smart_union = True
            extra = pydantic.Extra.allow


Score = typing.Union[Score_Numeric, Score_Categorical, Score_Boolean]
