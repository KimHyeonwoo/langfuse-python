# This file was auto-generated by Fern from our API Definition.

from .observation import Observation
import typing
import pydantic
from ....core.pydantic_utilities import IS_PYDANTIC_V2


class ObservationsView(Observation):
    prompt_name: typing.Optional[str] = pydantic.Field(alias="promptName", default=None)
    """
    The name of the prompt associated with the observation
    """

    prompt_version: typing.Optional[int] = pydantic.Field(
        alias="promptVersion", default=None
    )
    """
    The version of the prompt associated with the observation
    """

    model_id: typing.Optional[str] = pydantic.Field(alias="modelId", default=None)
    """
    The unique identifier of the model
    """

    input_price: typing.Optional[float] = pydantic.Field(
        alias="inputPrice", default=None
    )
    """
    The price of the input in USD
    """

    output_price: typing.Optional[float] = pydantic.Field(
        alias="outputPrice", default=None
    )
    """
    The price of the output in USD.
    """

    total_price: typing.Optional[float] = pydantic.Field(
        alias="totalPrice", default=None
    )
    """
    The total price in USD.
    """

    calculated_input_cost: typing.Optional[float] = pydantic.Field(
        alias="calculatedInputCost", default=None
    )
    """
    The calculated cost of the input in USD
    """

    calculated_output_cost: typing.Optional[float] = pydantic.Field(
        alias="calculatedOutputCost", default=None
    )
    """
    The calculated cost of the output in USD
    """

    calculated_total_cost: typing.Optional[float] = pydantic.Field(
        alias="calculatedTotalCost", default=None
    )
    """
    The calculated total cost in USD
    """

    latency: typing.Optional[float] = pydantic.Field(default=None)
    """
    The latency in seconds.
    """

    time_to_first_token: typing.Optional[float] = pydantic.Field(
        alias="timeToFirstToken", default=None
    )
    """
    The time to the first token in seconds
    """

    if IS_PYDANTIC_V2:
        model_config: typing.ClassVar[pydantic.ConfigDict] = pydantic.ConfigDict(
            extra="allow", frozen=True
        )  # type: ignore # Pydantic v2
    else:

        class Config:
            frozen = True
            smart_union = True
            extra = pydantic.Extra.allow
