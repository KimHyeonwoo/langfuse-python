# This file was auto-generated by Fern from our API Definition.

import datetime as dt
import typing

from ....core.datetime_utils import serialize_datetime
from ....core.pydantic_utilities import pydantic_v1
from ...commons.types.score_data_type import ScoreDataType


class CreateScoreRequest(pydantic_v1.BaseModel):
    id: typing.Optional[str] = None
    trace_id: str = pydantic_v1.Field(alias="traceId")
    name: str
    value: float
    """
    The numeric value of the score. Must be passed for all data types. Is used as source of truth when inferring the string value.
    """

    string_value: typing.Optional[str] = pydantic_v1.Field(alias="stringValue", default=None)
    """
    Translates numeric value to string equivalent for boolean and categorical score types. When passing a configId or boolean data type this field is automatically populated. Otherwise, you may use this field to provide a custom string value.
    """
    observation_id: typing.Optional[str] = pydantic_v1.Field(
        alias="observationId", default=None
    )
    comment: typing.Optional[str] = None
    data_type: typing.Optional[ScoreDataType] = pydantic_v1.Field(alias="dataType", default=None)
    """
    The data type of the score. When passing a configId this field is inferred. Otherwise, this field must be passed or will default to numeric.
    """

    config_id: typing.Optional[str] = pydantic_v1.Field(alias="configId", default=None)
    """
    The unique langfuse identifier of a score config. When passing this field, the dataType and stringValue fields are automatically populated.
    """

    def json(self, **kwargs: typing.Any) -> str:
        kwargs_with_defaults: typing.Any = {
            "by_alias": True,
            "exclude_unset": True,
            **kwargs,
        }
        return super().json(**kwargs_with_defaults)

    def dict(self, **kwargs: typing.Any) -> typing.Dict[str, typing.Any]:
        kwargs_with_defaults: typing.Any = {
            "by_alias": True,
            "exclude_unset": True,
            **kwargs,
        }
        return super().dict(**kwargs_with_defaults)

    class Config:
        frozen = True
        smart_union = True
        allow_population_by_field_name = True
        populate_by_name = True
        extra = pydantic_v1.Extra.allow
        json_encoders = {dt.datetime: serialize_datetime}
