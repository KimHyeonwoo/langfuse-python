# This file was auto-generated by Fern from our API Definition.

from ....core.pydantic_utilities import UniversalBaseModel
import pydantic
import typing
from ...commons.types.dataset_status import DatasetStatus
from ....core.pydantic_utilities import IS_PYDANTIC_V2


class CreateDatasetItemRequest(UniversalBaseModel):
    dataset_name: str = pydantic.Field(alias="datasetName")
    input: typing.Optional[typing.Optional[typing.Any]] = None
    expected_output: typing.Optional[typing.Optional[typing.Any]] = pydantic.Field(
        alias="expectedOutput", default=None
    )
    metadata: typing.Optional[typing.Optional[typing.Any]] = None
    source_trace_id: typing.Optional[str] = pydantic.Field(
        alias="sourceTraceId", default=None
    )
    source_observation_id: typing.Optional[str] = pydantic.Field(
        alias="sourceObservationId", default=None
    )
    id: typing.Optional[str] = pydantic.Field(default=None)
    """
    Dataset items are upserted on their id. Id needs to be unique (project-level) and cannot be reused across datasets.
    """

    status: typing.Optional[DatasetStatus] = pydantic.Field(default=None)
    """
    Defaults to ACTIVE for newly created items
    """

    if IS_PYDANTIC_V2:
        model_config: typing.ClassVar[pydantic.ConfigDict] = pydantic.ConfigDict(
            extra="allow", frozen=True
        )  # type: ignore # Pydantic v2
    else:

        class Config:
            frozen = True
            smart_union = True
            extra = pydantic.Extra.allow
