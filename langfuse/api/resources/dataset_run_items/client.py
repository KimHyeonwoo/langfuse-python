# This file was auto-generated by Fern from our API Definition.

import typing
from ...core.client_wrapper import SyncClientWrapper
from ...core.request_options import RequestOptions
from ..commons.types.dataset_run_item import DatasetRunItem
from ...core.pydantic_utilities import parse_obj_as
from ..commons.errors.error import Error
from ..commons.errors.unauthorized_error import UnauthorizedError
from ..commons.errors.access_denied_error import AccessDeniedError
from ..commons.errors.method_not_allowed_error import MethodNotAllowedError
from ..commons.errors.not_found_error import NotFoundError
from json.decoder import JSONDecodeError
from ...core.api_error import ApiError
from ...core.client_wrapper import AsyncClientWrapper

# this is used as the default value for optional parameters
OMIT = typing.cast(typing.Any, ...)


class DatasetRunItemsClient:
    def __init__(self, *, client_wrapper: SyncClientWrapper):
        self._client_wrapper = client_wrapper

    def create(
        self,
        *,
        run_name: str,
        dataset_item_id: str,
        run_description: typing.Optional[str] = OMIT,
        metadata: typing.Optional[typing.Optional[typing.Any]] = OMIT,
        observation_id: typing.Optional[str] = OMIT,
        trace_id: typing.Optional[str] = OMIT,
        request_options: typing.Optional[RequestOptions] = None,
    ) -> DatasetRunItem:
        """
        Create a dataset run item

        Parameters
        ----------
        run_name : str

        dataset_item_id : str

        run_description : typing.Optional[str]
            Description of the run. If run exists, description will be updated.

        metadata : typing.Optional[typing.Optional[typing.Any]]
            Metadata of the dataset run, updates run if run already exists

        observation_id : typing.Optional[str]

        trace_id : typing.Optional[str]
            traceId should always be provided. For compatibility with older SDK versions it can also be inferred from the provided observationId.

        request_options : typing.Optional[RequestOptions]
            Request-specific configuration.

        Returns
        -------
        DatasetRunItem

        Examples
        --------
        from finto import FernLangfuse

        client = FernLangfuse(
            x_langfuse_sdk_name="YOUR_X_LANGFUSE_SDK_NAME",
            x_langfuse_sdk_version="YOUR_X_LANGFUSE_SDK_VERSION",
            x_langfuse_public_key="YOUR_X_LANGFUSE_PUBLIC_KEY",
            username="YOUR_USERNAME",
            password="YOUR_PASSWORD",
            base_url="https://yourhost.com/path/to/api",
        )
        client.dataset_run_items.create(
            run_name="string",
            run_description="string",
            metadata={"key": "value"},
            dataset_item_id="string",
            observation_id="string",
            trace_id="string",
        )
        """
        _response = self._client_wrapper.httpx_client.request(
            "api/public/dataset-run-items",
            method="POST",
            json={
                "runName": run_name,
                "runDescription": run_description,
                "metadata": metadata,
                "datasetItemId": dataset_item_id,
                "observationId": observation_id,
                "traceId": trace_id,
            },
            request_options=request_options,
            omit=OMIT,
        )
        try:
            if 200 <= _response.status_code < 300:
                return typing.cast(
                    DatasetRunItem,
                    parse_obj_as(
                        type_=DatasetRunItem,  # type: ignore
                        object_=_response.json(),
                    ),
                )
            if _response.status_code == 400:
                raise Error(
                    typing.cast(
                        typing.Optional[typing.Any],
                        parse_obj_as(
                            type_=typing.Optional[typing.Any],  # type: ignore
                            object_=_response.json(),
                        ),
                    )
                )
            if _response.status_code == 401:
                raise UnauthorizedError(
                    typing.cast(
                        typing.Optional[typing.Any],
                        parse_obj_as(
                            type_=typing.Optional[typing.Any],  # type: ignore
                            object_=_response.json(),
                        ),
                    )
                )
            if _response.status_code == 403:
                raise AccessDeniedError(
                    typing.cast(
                        typing.Optional[typing.Any],
                        parse_obj_as(
                            type_=typing.Optional[typing.Any],  # type: ignore
                            object_=_response.json(),
                        ),
                    )
                )
            if _response.status_code == 405:
                raise MethodNotAllowedError(
                    typing.cast(
                        typing.Optional[typing.Any],
                        parse_obj_as(
                            type_=typing.Optional[typing.Any],  # type: ignore
                            object_=_response.json(),
                        ),
                    )
                )
            if _response.status_code == 404:
                raise NotFoundError(
                    typing.cast(
                        typing.Optional[typing.Any],
                        parse_obj_as(
                            type_=typing.Optional[typing.Any],  # type: ignore
                            object_=_response.json(),
                        ),
                    )
                )
            _response_json = _response.json()
        except JSONDecodeError:
            raise ApiError(status_code=_response.status_code, body=_response.text)
        raise ApiError(status_code=_response.status_code, body=_response_json)


class AsyncDatasetRunItemsClient:
    def __init__(self, *, client_wrapper: AsyncClientWrapper):
        self._client_wrapper = client_wrapper

    async def create(
        self,
        *,
        run_name: str,
        dataset_item_id: str,
        run_description: typing.Optional[str] = OMIT,
        metadata: typing.Optional[typing.Optional[typing.Any]] = OMIT,
        observation_id: typing.Optional[str] = OMIT,
        trace_id: typing.Optional[str] = OMIT,
        request_options: typing.Optional[RequestOptions] = None,
    ) -> DatasetRunItem:
        """
        Create a dataset run item

        Parameters
        ----------
        run_name : str

        dataset_item_id : str

        run_description : typing.Optional[str]
            Description of the run. If run exists, description will be updated.

        metadata : typing.Optional[typing.Optional[typing.Any]]
            Metadata of the dataset run, updates run if run already exists

        observation_id : typing.Optional[str]

        trace_id : typing.Optional[str]
            traceId should always be provided. For compatibility with older SDK versions it can also be inferred from the provided observationId.

        request_options : typing.Optional[RequestOptions]
            Request-specific configuration.

        Returns
        -------
        DatasetRunItem

        Examples
        --------
        import asyncio

        from finto import AsyncFernLangfuse

        client = AsyncFernLangfuse(
            x_langfuse_sdk_name="YOUR_X_LANGFUSE_SDK_NAME",
            x_langfuse_sdk_version="YOUR_X_LANGFUSE_SDK_VERSION",
            x_langfuse_public_key="YOUR_X_LANGFUSE_PUBLIC_KEY",
            username="YOUR_USERNAME",
            password="YOUR_PASSWORD",
            base_url="https://yourhost.com/path/to/api",
        )


        async def main() -> None:
            await client.dataset_run_items.create(
                run_name="string",
                run_description="string",
                metadata={"key": "value"},
                dataset_item_id="string",
                observation_id="string",
                trace_id="string",
            )


        asyncio.run(main())
        """
        _response = await self._client_wrapper.httpx_client.request(
            "api/public/dataset-run-items",
            method="POST",
            json={
                "runName": run_name,
                "runDescription": run_description,
                "metadata": metadata,
                "datasetItemId": dataset_item_id,
                "observationId": observation_id,
                "traceId": trace_id,
            },
            request_options=request_options,
            omit=OMIT,
        )
        try:
            if 200 <= _response.status_code < 300:
                return typing.cast(
                    DatasetRunItem,
                    parse_obj_as(
                        type_=DatasetRunItem,  # type: ignore
                        object_=_response.json(),
                    ),
                )
            if _response.status_code == 400:
                raise Error(
                    typing.cast(
                        typing.Optional[typing.Any],
                        parse_obj_as(
                            type_=typing.Optional[typing.Any],  # type: ignore
                            object_=_response.json(),
                        ),
                    )
                )
            if _response.status_code == 401:
                raise UnauthorizedError(
                    typing.cast(
                        typing.Optional[typing.Any],
                        parse_obj_as(
                            type_=typing.Optional[typing.Any],  # type: ignore
                            object_=_response.json(),
                        ),
                    )
                )
            if _response.status_code == 403:
                raise AccessDeniedError(
                    typing.cast(
                        typing.Optional[typing.Any],
                        parse_obj_as(
                            type_=typing.Optional[typing.Any],  # type: ignore
                            object_=_response.json(),
                        ),
                    )
                )
            if _response.status_code == 405:
                raise MethodNotAllowedError(
                    typing.cast(
                        typing.Optional[typing.Any],
                        parse_obj_as(
                            type_=typing.Optional[typing.Any],  # type: ignore
                            object_=_response.json(),
                        ),
                    )
                )
            if _response.status_code == 404:
                raise NotFoundError(
                    typing.cast(
                        typing.Optional[typing.Any],
                        parse_obj_as(
                            type_=typing.Optional[typing.Any],  # type: ignore
                            object_=_response.json(),
                        ),
                    )
                )
            _response_json = _response.json()
        except JSONDecodeError:
            raise ApiError(status_code=_response.status_code, body=_response.text)
        raise ApiError(status_code=_response.status_code, body=_response_json)
