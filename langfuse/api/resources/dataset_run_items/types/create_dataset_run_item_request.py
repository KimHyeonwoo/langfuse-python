# This file was auto-generated by Fern from our API Definition.

import datetime as dt
import typing

from ....core.datetime_utils import serialize_datetime

try:
    import pydantic.v1 as pydantic  # type: ignore
except ImportError:
    import pydantic  # type: ignore


class CreateDatasetRunItemRequest(pydantic.BaseModel):
    run_name: str = pydantic.Field(alias="runName")
    metadata: typing.Optional[typing.Any] = pydantic.Field(
        default=None,
        description="Metadata of the dataset run, updates run if run already exists",
    )
    dataset_item_id: str = pydantic.Field(alias="datasetItemId")
    observation_id: typing.Optional[str] = pydantic.Field(
        alias="observationId", default=None
    )
    trace_id: typing.Optional[str] = pydantic.Field(
        alias="traceId",
        default=None,
        description="traceId should always be provided. For compatibility with older SDK versions it can also be inferred from the provided observationId.",
    )

    def json(self, **kwargs: typing.Any) -> str:
        kwargs_with_defaults: typing.Any = {
            "by_alias": True,
            "exclude_unset": True,
            **kwargs,
        }
        return super().json(**kwargs_with_defaults)

    def dict(self, **kwargs: typing.Any) -> typing.Dict[str, typing.Any]:
        kwargs_with_defaults: typing.Any = {
            "by_alias": True,
            "exclude_unset": True,
            **kwargs,
        }
        return super().dict(**kwargs_with_defaults)

    class Config:
        frozen = True
        smart_union = True
        allow_population_by_field_name = True
        json_encoders = {dt.datetime: serialize_datetime}
