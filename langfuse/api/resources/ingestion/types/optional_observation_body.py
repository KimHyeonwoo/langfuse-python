# This file was auto-generated by Fern from our API Definition.

from ....core.pydantic_utilities import UniversalBaseModel
import typing
import pydantic
import datetime as dt
from ...commons.types.observation_level import ObservationLevel
from ....core.pydantic_utilities import IS_PYDANTIC_V2


class OptionalObservationBody(UniversalBaseModel):
    trace_id: typing.Optional[str] = pydantic.Field(alias="traceId", default=None)
    name: typing.Optional[str] = None
    start_time: typing.Optional[dt.datetime] = pydantic.Field(
        alias="startTime", default=None
    )
    metadata: typing.Optional[typing.Optional[typing.Any]] = None
    input: typing.Optional[typing.Optional[typing.Any]] = None
    output: typing.Optional[typing.Optional[typing.Any]] = None
    level: typing.Optional[ObservationLevel] = None
    status_message: typing.Optional[str] = pydantic.Field(
        alias="statusMessage", default=None
    )
    parent_observation_id: typing.Optional[str] = pydantic.Field(
        alias="parentObservationId", default=None
    )
    version: typing.Optional[str] = None

    if IS_PYDANTIC_V2:
        model_config: typing.ClassVar[pydantic.ConfigDict] = pydantic.ConfigDict(
            extra="allow", frozen=True
        )  # type: ignore # Pydantic v2
    else:

        class Config:
            frozen = True
            smart_union = True
            extra = pydantic.Extra.allow
